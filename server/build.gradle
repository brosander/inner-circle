plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
    id 'application'
    id "com.palantir.docker" version "0.22.1"
}

group 'com.github.brosander.innercircle'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    def ktorVersion = "1.1.4"

    implementation "ch.qos.logback:logback-classic:1.2.3"
    
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.546'

    implementation 'com.google.inject:guice:4.2.2'

    implementation "io.ktor:ktor-auth:$ktorVersion"
    implementation "io.ktor:ktor-client-apache:$ktorVersion"
    implementation "io.ktor:ktor-server-netty:$ktorVersion"
    implementation "io.ktor:ktor-jackson:$ktorVersion"
    implementation "io.ktor:ktor-html-builder:$ktorVersion"
    implementation "io.ktor:ktor-locations:$ktorVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:0.6.12"
    
    implementation 'org.postgresql:postgresql:42.2.5'
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

mainClassName = 'com.github.brosander.innercircle.MainKt'

task createDataLoadScripts(type: Sync) {
    dependsOn('installDist')

    eachFile { f -> f.filter { it.replace(mainClassName, 'com.github.brosander.innercircle.model.DataLoadKt') } }
    from 'build/install/server/bin'
    into 'build/dataload-scripts/bin'
    rename 'server(.*)', 'dataload$1'
}

task prepareStaticAssets(type: Sync) {
    dependsOn(':client:build')

    from '../client/build/dist-output'
    into 'build/static-assets/static'
}

dockerPrepare.dependsOn createDataLoadScripts
dockerPrepare.dependsOn prepareStaticAssets

docker {
    name "inner-circle-${project.name}"
    tags version
    files tasks.installDist.outputs, fileTree('build/dataload-scripts'), fileTree('build/static-assets')
}

startScripts.with {
    doLast {
        unixScript.text = unixScript.text.replace('APP_HOME=', 'export APP_HOME=')
        windowsScript.text = windowsScript.text
    }
}